[comment encoding = UTF-8 /]
[module ResponseBusinessObjectParserSAX('http://www.eyal.fr/android/dataLib')]
[import fr::eyal::datalib::generator::acceleo::common::Tools /]
[import fr::eyal::datalib::generator::acceleo::common::BusinessObjectTool /]


[template public businessObjectParserSAX(aBusinessObject : ResponseBusinessObject){
_package:String = aBusinessObject._package+'.parser';
_directory:String = getDirectoryFromPackage(_package);
}]

[file (_directory + aBusinessObject.name.toUpperFirst() + 'Parser.java', false, 'UTF-8')]
package [_package/];

import java.util.ArrayList;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import fr.eyal.lib.data.model.ResponseBusinessObject;
import fr.eyal.lib.data.parser.GenericHandler;
import [aBusinessObject._package+'.model.'+getPackage(aBusinessObject)+'.*'/];


public class [aBusinessObject.name.toUpperFirst()/]Parser extends DefaultHandler implements GenericHandler {

    private static final String TAG = [aBusinessObject.name.toUpperFirst()/]Parser.class.getSimpleName();

    public static final int UNKNOWN = -1;

	[declareTagConstants (aBusinessObject)/]
    
	private int mState = UNKNOWN;

    private final StringBuilder mBuilder = new StringBuilder();
	[declareTempBusinessObjects (aBusinessObject) /]

    public [aBusinessObject.name.toUpperFirst()/]Parser() {
	[initTempResponseBusinessObject (aBusinessObject, '') /]
	}

    @Override
    public ResponseBusinessObject getParsedData() {
        return [aBusinessObject.name.toLowerFirst()/];
    }

    @Override
    public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {

        mBuilder.setLength(0);

        switch (mState) {

			[defineStartElementCase(aBusinessObject)/]

            default:
                // do nothing
                break;
        }
    }

    @Override
    public void characters(final char['['/]] ch, final int start, final int length) throws SAXException {
        mBuilder.append(ch, start, length);
    }

    @Override
    public void endElement(final String uri, final String localName, final String qName) throws SAXException {

        switch (mState) {
			
			[defineEndElement(aBusinessObject)/]

            default:
                // do nothing
                break;
        }
    }

    @Override
    public void parse(final Object content) {
        // TODO Auto-generated method stub
    }
}


[/file]
[/template]


[template public defineEndElement (aBusinessObject : ResponseBusinessObject) post (trim()) ]
case [getName(aBusinessObject).toUpper()/]:
    if (qName.equals("[getName(aBusinessObject)/]")) {
        mState = UNKNOWN;
    }
    break;

[let  prefixVariable:String = aBusinessObject.name.toLowerFirst()][let  prefixChild:String = getName(aBusinessObject).toUpper()]
	[for (field : Field | aBusinessObject.contentFields)]
[defineEndElement (field, prefixChild, prefixVariable) /]
	[/for]
	[for (businessObject : BusinessObject | aBusinessObject.childs)]
[defineEndElement (businessObject, prefixChild, prefixVariable) /]
	[/for]
[/let][/let]
[/template]

[template public defineEndElement (aBusinessObject : BusinessObject, prefix : String, prefixVariable : String) post (trim()) ]
case [prefix/][getCompleteNameToUpper(aBusinessObject.relatedField, '_')/]:
    if (qName.equals("[getName(aBusinessObject)/]")) {
        mState = [prefix/][getCompleteNameToUpper(aBusinessObject.relatedField.xmlParent, '_')/];
		[comment we add the child to the childs array /]
		[prefixVariable/].[getCompleteNameToLowerFirst(aBusinessObject, '')/].add([getCompleteNameToLowerFirst(aBusinessObject, '')/]);
    }
    break;
	

[let  prefixChild:String = prefix + '_' + getName(aBusinessObject).toUpper()]
	[for (field : Field | aBusinessObject.contentFields)]
[defineEndElement (field, prefix, getCompleteNameToLowerFirst(aBusinessObject, '')) /]
	[/for]
	[comment we give the whole variable path to the BusinessObject adding/]
	[let  prefixChildVariable:String = prefix + '.' +  getCompleteNameToLowerFirst(aBusinessObject, '')]
		[for (businessObject : BusinessObject | aBusinessObject.childs)]
[defineEndElement (businessObject, prefix, prefixChildVariable) /]
		[/for]
	[/let]
[/let]
[/template]

[template public defineEndElement (field : Field, prefix : String, prefixVariable : String) post (trim()) ]
case [prefix/][getCompleteNameToUpper(field.relatedField, '_')/]:
    if (qName.equals("[getName(field)/]")) {
        mState = [prefix/][getCompleteNameToUpper(field.relatedField.xmlParent, '_')/];
	[if (field.type = ParameterType::String)]
		[prefixVariable/].[field.name.toLowerFirst()/] = mBuilder.toString();
	[elseif (field.type = ParameterType::int)]
		[prefixVariable/].[field.name.toLowerFirst()/] = Integer.parseInt(mBuilder.toString());
	[elseif (field.type = ParameterType::float)]
		[prefixVariable/].[field.name.toLowerFirst()/] = Float.parseFloat(mBuilder.toString());
	[elseif (field.type = ParameterType::boolean)]
		[prefixVariable/].[field.name.toLowerFirst()/] = Boolean.parseBoolean(mBuilder.toString());
	[/if]
    }
    break;
	
[let  prefixChild:String = prefix + '_' + getName(field).toUpper()][let  prefixChildVariable:String = prefix]
	[for (field : Field | field .xmlContentFields)]
[defineEndElement (field, prefix, prefixChildVariable) /]
	[/for]
[/let][/let]
[/template]

[template public defineStartElementCase (aBusinessObject : Field, prefix : String) post (trim()) {prefixChild:String = prefix.toUpper()+'_'+getName(aBusinessObject).toUpper(); } ]
[if (aBusinessObject.xmlContentFields->size() > 0)]
case [prefixChild/]:

[for (field : Field | aBusinessObject.xmlContentFields)]
	[if (i=1)]
    if (qName.equals("[getName(field)/]")) {
	[else]
	else if (qName.equals("[getName(field)/]")) {
	[/if]
	[comment if we are declaring a Business Object /]
	[if (field.oclIsKindOf(FieldBusinessObject))]
        mState = [prefixChild/]_[getName(field).toUpper()/];
        [initTempBusinessObject (field.oclAsType(FieldBusinessObject).content) /]
		[comment for each attributes inside the tag we add it to the corresponding BusinessObject /]
		[setXmlAttributes(field)/]
	[else]
		mState = [prefixChild/]_[getName(field).toUpper()/];
		[comment for each attributes inside the tag we add it to the corresponding BusinessObject /]
		[setXmlAttributes(field)/]
	[/if]
    }
[/for]
    break;
[/if]

[for (field : Field | aBusinessObject.xmlContentFields)][defineStartElementCase (field, prefixChild) /][/for]
[comment][for (businessObject : BusinessObject | aBusinessObject.childs)][defineStartElementCase (businessObject, prefixChild) /][/for][/comment]
[/template]


[template public defineStartElementCase (aBusinessObject : ResponseBusinessObject) post (trim()) ]
case UNKNOWN:
    if (qName.equals("[getName(aBusinessObject)/]")) {
        mState = [getName(aBusinessObject).toUpper()/];
        [initTempResponseBusinessObject (aBusinessObject, '') /]
		[comment we add each attribute inside the tag to the corresponding BusinessObject /]
		[setXmlAttributes(aBusinessObject)/]
    }
    break;

[if (aBusinessObject.xmlContentFields->size() > 0)]
[let prefixChild : String = getName(aBusinessObject).toUpper()]
case [prefixChild/]:
[for (field : Field | aBusinessObject.xmlContentFields)]
	[if (i=1)]
    if (qName.equals("[getName(field)/]")) {
	[else]
	else if (qName.equals("[getName(field)/]")) {
	[/if]
	[comment if we are declaring a Business Object /]
	[if (field.oclIsKindOf(FieldBusinessObject))]
        mState = [prefixChild/]_[getName(field).toUpper()/];
        [getCompleteNameToLowerFirst(field.oclAsType(FieldBusinessObject).content, '')/] = new [getCompleteNameToUpperFirst(field.oclAsType(FieldBusinessObject).content, '')/]();
		[comment for each attributes inside the tag we add it to the corresponding BusinessObject /]
		[setXmlAttributes(field)/]
	[else]
		mState = [prefixChild/]_[getName(field).toUpper()/];
		[comment for each attributes inside the tag we add it to the corresponding BusinessObject /]
		[setXmlAttributes(field)/]
	[/if]
    }
[/for]
    break;
[/let]
[/if]

[comment][defineStartElementCase (aBusinessObject, '') /][/comment]
[let  prefix:String = getName(aBusinessObject).toUpper()]
	[for (field : Field | aBusinessObject.xmlContentFields)]
[defineStartElementCase (field, prefix) /]
	[/for]
[/let]

[/template]

[template public initTempResponseBusinessObject (aBusinessObject : ResponseBusinessObject, prefix : String) post (trim()) { variable:String = aBusinessObject.name.toLowerFirst(); } ]
[prefix/][variable/] = new [getCompleteNameToUpperFirst(aBusinessObject, '')/]();
[for (child : BusinessObject | aBusinessObject.childs) ]
[initTempBusinessObject (child, prefix+variable+'.') /]
[/for]
[/template]

[template public initTempBusinessObject (aBusinessObject : BusinessObject) post (trim()) { variable:String = getCompleteNameToLowerFirst(aBusinessObject, ''); } ]
[variable/] = new [getCompleteNameToUpperFirst(aBusinessObject, '')/]();
[for (child : BusinessObject | aBusinessObject.childs) { prefixChild:String = variable+'.'; } ]
[initTempBusinessObject (child, prefixChild) /]
[/for]
[/template]

[template public initTempBusinessObject (aBusinessObject : BusinessObject, prefix : String) post (trim()) { variable:String = getCompleteNameToLowerFirst(aBusinessObject, ''); } ]
[prefix/][variable/] = new ArrayList<[getCompleteNameToUpperFirst(aBusinessObject, '')/]>();
[for (child : BusinessObject | aBusinessObject.childs) { prefixChild:String = prefix+variable+'.'; } ]
[initTempBusinessObject (child, prefixChild) /]
[/for]
[/template]

[template public declareTempBusinessObjects (aBusinessObject : BusinessObject) post (trim()) ]
private [getCompleteNameToUpperFirst(aBusinessObject, '')/] [getCompleteNameToLowerFirst(aBusinessObject, '')/];
[for (child : BusinessObject | aBusinessObject.childs)]
[declareTempBusinessObjects (child) /]
[/for]
[/template]

[template public declareTagConstants (aBusinessObject : ResponseBusinessObject) post (trim()) ]
//[aBusinessObject.name.toUpperFirst()/]
private static final int [getName(aBusinessObject).toUpper()/] = [aBusinessObject.parseId/];
[let prefix : String = getName(aBusinessObject).toUpper()+'_']
	[for (field : Field | aBusinessObject.xmlContentFields)]
[declareTagConstants(field, prefix)/]
	[/for]
	[for (child : BusinessObject | aBusinessObject.childs) ]
[declareTagConstants(child, prefix)/]
	[/for]
[/let]
[/template]

[template public declareTagConstants (aBusinessObject : BusinessObject, prefix : String) post (trim()) ]
//[aBusinessObject.name.toUpperFirst()/]
private static final int [prefix.toUpper()+getName(aBusinessObject).toUpper()/] = [aBusinessObject.parseId/];
[for (field : Field | aBusinessObject.contentFields)]
[declareTagConstants (field, prefix.toUpper()+getName(aBusinessObject).toUpper()+'_') /]
[/for]
[for (child : BusinessObject | aBusinessObject.childs) ]
[declareTagConstants(child, prefix.toUpper()+'_'+getName(child).toUpper()+'_')/]
[/for]
[/template]

[template public declareTagConstants (parentField : Field, prefix : String) post (trim()) ]
private static final int [prefix.toUpper()+getName(parentField).toUpper()/] = [parentField.parseId/];
[for (field : Field | parentField.xmlContentFields)]
[declareTagConstants (field, prefix.toUpper()+getName(parentField).toUpper()+'_') /]
[/for]
[/template]

[template public setXmlAttributes (field : FieldBusinessObject) post (trim()) ]
[for (field : Field | field.xmlAttributes)]
//attribute [field.xmlName/]
[let buffVariableName:String = 'buff'+field.name.toUpperFirst()]
	[if (field.type=ParameterType::String)]
[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = attributes.getValue("[field.xmlName/]");
	[elseif (field.type=ParameterType::int)]
String [buffVariableName/] = attributes.getValue("[field.xmlName/]");
if([buffVariableName/] != null)
	[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = Integer.parseInt([buffVariableName/]);
	[elseif (field.type=ParameterType::float)]
String [buffVariableName/] = attributes.getValue("[field.xmlName/]");
if([buffVariableName/] != null)
	[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = Float.parseFloat([buffVariableName/]);
	[elseif (field.type=ParameterType::boolean)]
String [buffVariableName/] = attributes.getValue("[field.xmlName/]");
if([buffVariableName/] != null)
	[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = Boolean.parseBoolean([buffVariableName/]);
	[/if]
[/let]
[/for]
[/template]

[template public setXmlAttributes (field : Field) post (trim()) ]
[for (field : Field | field.xmlAttributes)]
[let buffVariableName:String = 'buff'+field.name.toUpperFirst()]
	[if (field.type=ParameterType::String)]
[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = attributes.getValue("[field.xmlName/]");
	[elseif (field.type=ParameterType::int)]
String [buffVariableName/] = attributes.getValue("[field.xmlName/]");
if([buffVariableName/] != null)
	[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = Integer.parseInt([buffVariableName/]);
	[elseif (field.type=ParameterType::float)]
String [buffVariableName/] = attributes.getValue("[field.xmlName/]");
if([buffVariableName/] != null)
	[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = Float.parseFloat([buffVariableName/]);
	[elseif (field.type=ParameterType::boolean)]
String [buffVariableName/] = attributes.getValue("[field.xmlName/]");
if([buffVariableName/] != null)
	[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = Boolean.parseBoolean([buffVariableName/]);
	[/if]
[/let]
[/for]
[/template]

[template public setXmlAttributes (aBusinessObject : ResponseBusinessObject) post (trim()) ]
[for (field : Field | aBusinessObject.xmlAttributes)]
[let buffVariableName:String = 'buff'+field.name.toUpperFirst()]
	[if (field.type=ParameterType::String)]
[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = attributes.getValue("[field.xmlName/]");
	[elseif (field.type=ParameterType::int)]
String [buffVariableName/] = attributes.getValue("[field.xmlName/]");
if([buffVariableName/] != null)
	[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = Integer.parseInt([buffVariableName/]);
	[elseif (field.type=ParameterType::float)]
String [buffVariableName/] = attributes.getValue("[field.xmlName/]");
if([buffVariableName/] != null)
	[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = Float.parseFloat([buffVariableName/]);
	[elseif (field.type=ParameterType::boolean)]
String [buffVariableName/] = attributes.getValue("[field.xmlName/]");
if([buffVariableName/] != null)
	[field.businessObject.name.toLowerFirst()/].attr[field.name.toUpperFirst()/] = Boolean.parseBoolean([buffVariableName/]);
	[/if]
[/let]
[/for]
[/template]

[template public getName(businessObject : BusinessObject)][businessObject.xmlName/][/template]
[template public getName(field : Field)][field.xmlName/][/template]

[template public getCompleteNameToUpper (field : Field, separator : String) post (trim())]
[if (field.xmlParent <> null)][getCompleteNameToUpper (field.xmlParent, separator)/][/if][separator/][field.xmlName.toUpper()/]
[/template]


[query public getCounter(bo : BusinessObject, i : Integer) : Integer = getCounter(bo, i) /]
